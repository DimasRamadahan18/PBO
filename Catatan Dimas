==========================================================================================================================================
                                                        CATATAN PBO DIMAS RAMADHAN
                                                        
                                                          Sistem Informasi </18>
==========================================================================================================================================



BAB 1
Class VS Objek

Python telah menjadi bahasa berorientasi objek sejak bahasa Python sendiri dibuat. Untuk membuat dan menggunakan kelas dan objek pada Python benar-benar mudah. Pada tutorial ini Anda akan
dibantu untuk menjadi ahli dalam penggunaan pemrograman berorientasi objek Python.

Jika Anda tidak memiliki pengalaman sebelumnya dengan pemrograman berorientasi objek (OOP), Anda mempelajarinya terlebih dahulu agar Anda dapat memahami konsep dasarnya.
	    Untuk Membuat Statement class digunakan untuk membuat definisi kelas baru. Nama kelas segera mengikuti kelas kata kunci diikuti oleh titik dua sebagai berikut.
        
Class	Prototipe yang ditentukan pengguna untuk objek yang mendefinisikan seperangkat atribut yang menjadi ciri objek kelas apa pun. Atribut adalah data anggota (variabel kelas dan variabel contoh)
dan metode, diakses melalui notasi titik.

Class variable	Sebuah variabel yang dibagi oleh semua contoh kelas. Variabel kelas didefinisikan dalam kelas tapi di luar metode kelas manapun. Variabel kelas tidak digunakan sesering variabel contoh.
Data member	Variabel kelas atau variabel contoh yang menyimpan data yang terkait dengan kelas dan objeknya.

Function overloading	Penugasan lebih dari satu perilaku ke fungsi tertentu. Operasi yang dilakukan bervariasi menurut jenis objek atau argumen yang terlibat.

Instance variable	Variabel yang didefinisikan di dalam sebuah metode dan hanya dimiliki oleh instance kelas saat ini.

Inheritance	Pengalihan karakteristik kelas ke kelas lain yang berasal darinya.

Instance	Objek individu dari kelas tertentu. Obyek obj yang termasuk dalam Lingkaran kelas, misalnya, adalah turunan dari Lingkaran kelas.
Instantiation	Penciptaan sebuah instance dari sebuah kelas.

Method	Jenis fungsi khusus yang didefinisikan dalam definisi kelas.

Object	Contoh unik dari struktur data yang didefinisikan oleh kelasnya. Objek terdiri dari kedua anggota data (variabel kelas dan variabel contoh) dan metode.
Operator overloading	Penugasan lebih dari satu fungsi ke operator tertentu.
	    
	    class namaClass () :
	        def methode 1 (self) :
	            Isi metodenya
	        def metodhe 2 (self) :
	            Isi metodenya
	            
	    Dalam terminologi pemograman berbasis objek, terdapat istilah kosntruktor dan destruktor, Konstruktor adalah metode yang akan dijalankan ketika objek diciptakan, sedangkan destruktor adalah metode yang
      akan dijalankan ketika objek dimusnahkan. di dalam python, konstruktor berupa metode dengan nama __init__, contohnya adalah
	    
	    class namaclass():
	        def __init__(sel,parameter):
	            self.nama = nama 
	        def metode (self,paramater)
	            isi metode
	            
	Untuk memanggil Sebuah Class, kita harus memberikan nilai pada class tersebut, contohnya:
	
	    class kubus:
	    def __init__(self,s):
	        self.sisi=5
	    
	    def tampilkansisi(self):
	        print(self.sisi)
	        
	    def luas(self):
	        print("luas= ",self.sisi**2)
	    
	    def volume(self):
	        print("volume ",self.sisi**3)
	    
	    
	kubus1=kubus(4)
	kubus1.tampilkansisi()
	kubus1.luas()
	kubus1.volume()
	
	dan Outpunya akan seperti ini:
	5
	luas=  25
	volume  125
	
	
==========================================================================================================================================
BAB 2 
INHERITANCE / Pewarisan
	
	    Inheritance atau pewarisan adalah fitur pada pemograman berbasis objek yang memungkinkan suatu kelas diturunkan dari kelas lain. Fitur ini membuat
      pemograman mengembangkan suatu kelas berdasarkan 
      kelas lain tanpa harus meulis ulang dari nol.
	    
	    Contohnya seperti ini :
      
      
  class orang:
    def __init__(self,nama):
        self.nama = nama
        print("nama Saya Adalah",self.nama)
        
class mhs(orang):
    def __init__(self,nim,nama):
        super().__init__(nama)
        self.nim = nim
        print("Saya Adalah Mhs Madura")
        print("NIM saya adalah :" ,self.nim,"\n")

class pegawai(orang):
    def __init__(self,nip,nama):
        super().__init__(nama)
        self.nip = nip
        print("NIP saya Adalah : ",self.nip)
        
class karyawan(pegawai):
    def __init__(self,nip,nama):
        super().__init__(nip,nama)
        print("Saya Adalah Karyawan\n")
        
        
class dosen(pegawai):
    def __init__(self,nip,nama):
        super().__init__(nip,nama)
        print("Saya Adalah Dosen\n")

print("="*40)
d1 = mhs("180441100002","Dimas Ramadhan")
print("="*40)
d2 = karyawan("658397836","Ramdan")
print("="*40)
d3 = dosen("6583974367","dim")
print("="*40)
    
    Hasil:
    ========================================
nama Saya Adalah Dimas Ramadhan
Saya Adalah Mhs Madura
NIM saya adalah : 180441100002 

========================================
nama Saya Adalah Ramdan
NIP saya Adalah :  658397836
Saya Adalah Karyawan

========================================
nama Saya Adalah dim
NIP saya Adalah :  6583974367
Saya Adalah Dosen

========================================
	    
	class user :
	    name = ""
	    def __init__ (self,name):
	        self.nama = name
	    def printnama(self):
	        print("name =",self.nama)
	class programmer(user):
	    def __init__(self,name):
	        self.nama = name
	    def dopython(self):
	        print("programming python")
	        
	brian = user("brian")
	brian.printnama()
	diana = programmer("diana")
	diana.printnama()
	diana.dopython()
	
	dan outputnya adalah:
	name = brian
	name = diana
	programming python


==========================================================================================================================================
#BAB 3
	TYPE OF INHERITANCE
	
	inheritance mempunyai 4 type:
	1.Default
	2.Overriding
	3.Super property
	4.Multiple
	
	1. Default:
	
	    class Fish: 
	        def __init__(self, first_name, last_name="Fish", skeleton="bone", eyelids=False): 
	            self.first_name = first_name 
	            self.last_name = last_name 
	            self.skeleton = skeleton 
	            self.eyelids = eyelids 
	        def swim(self): 
	            print("The fish is swimming.") 
	        def swim_backwards(self): 
	            print("The fish can swim backwards."
	     class Trout (Fish): 
	        pass 
	     class Clownfish(Fish): 
	        def live_with_anemone(self): 
	            print("The clownfish is coexisting with sea anemone.") 
	
	2.Overriding: 
	
	    class Fish: 
	        def __init__(self, first_name, last_name="Fish", skeleton="bone", eyelids=False): 
	            self.first_name = first_name 
	            self.last_name = last_name 
	            self.skeleton = skeleton 
	            self.eyelids = eyelids 
	        def swim(self): 
	            print("The fish is swimming.") 
	        def swim_backwards(self): 
	            print("The fish can swim backwards.") 
	   
	    class Shark(Fish): 
	        def __init__(self, first_name, last_name="Shark", skeleton="cartilage", eyelids=True): 
	            self.first_name = first_name 
	            self.last_name = last_name 
	            self.skeleton = skeleton 
	            self.eyelids = eyelids 
	        def swim_backwards(self): 
	            print("The shark cannot swim backwards, but can sink backwards.") 
	
	3.Super:
	
	    class Trout(Fish):
	            def __init__(self,water,first_name, last_name,skeleton,eyelids):
	            self.water = water
	            Fish.__init__(self,first_name, last_name,skeleton, eyelids)
	            super().__init__(self,first_name, last_name,skeleton, eyelids)
	
	    terry = Trout("freshwater","shark","fish","no bone","true")
	    print(terry.first_name)
	    
	contohnya seperti ini:
	
	class orang:
	    def __init__(self,nama):
	        self.nama = nama
	    def tampilkan(self):
	        print("nama saya",self.nama)
	        
	class karyawan(orang):
	    def __init__(self,kp,nama):
	        super().__init__(nama)
	        self.kodepegawai = kp
	    def tampilkan(self):
	        print("kode pegawai",self.kodepegawai,)
	        
	class karyawancabang(karyawan):
	    def __init__(self,klc,kp,nama):
	        super().__init__(nama,kp)
	        self.kodelokasicabang = klc
	    def tampilkan(self):
	        print("kode lokasi cabang",self.kodelokasicabang,)
	
	o1 = orang("lutfi")
	o1.tampilkan()
	o2 = karyawan("0812","lutfi")
	o2.tampilkan()
	o3 = karyawancabang("001","lutfi","0812")
	o3.tampilkan()
	
	outputnya adalah:
	nama saya lutfi
	kode pegawai 123
	kode lokasi cabang 001
	
	4. multiple:
	
	    class Coral: 
	        def community(self): 
	            print("Coral lives in a community.") 
	
	    class Anemone: 
	        def protect_clownfish(self): 
	            print("The anemone is protecting the clownfish.") 
	
	    class CoralReef(Coral, Anemone): 
	        pass 
	      
	    great_barrier = CoralReef() 
	    great_barrier.community() 
	    great_barrier.protect_clownfish() 
	    
	 Outputnya adalah:
	
	Coral lives in a community.
	The anemone is protecting the clownfish.
	

==========================================================================================================================================
BAB 4
	POLYMORPHISME
	
	Poli yang berarti (banyak) dan morfisme yang berarti (bentuk).
	Kami akan membuat struktur yang dapat mengambil atau menggunakan banyak bentuk objek.
	
	class Shark():
	    def swim(self):
	        print("The shark is swimming.")
	    def swim_backwards(self):
	        print("The shark cannot swim backwards, but can sink backwards.")
	    def skeleton(self):
	        print("The shark's skeleton is made of cartilage.")
	
	class Clownfish():
	    def swim(self):
	        print("The clownfish is swimming.")
	    def swim_backwards(self):
	        print("The clownfish can swim backwards.")
	    def skeleton(self):
	        print("The clownfish's skeleton is made of bone.")
	
	sammy = Shark()
	sammy.skeleton()
	
	casey = Clownfish()
	casey.skeleton()
	
	outputnya adalah
	
	The shark's skeleton is made of cartilage.
	The clownfish's skeleton is made of bone.
	
	banyak jenis polymorphisme antara lain:
	
	1.Polymorphism with a Function
	
	
	class shark():
	    def swim(self):
	        print("the sharknis swimming")
	        
	    def swim_backwards(self):
	        print("the shark cannot swim backwards, but can sink backwards")
	        
	    def skeleton(self):
	        print("the shark's skeleton is made or cartilage")
	        
	class clownfish():
	    def swim(self):
	        print("the clown fish can swim backwards")
	        
	    def swim_backwards(self):
	        print("the clownfish can swim backwards")
	        
	    def skeleton(self):
	        print("the clownfish skeleton is made of bone")
	        
	sammy = shark()
	sammy.skeleton()
	casey = clownfish()
	casey.skeleton()
	
	def in_the_pacific(fish):
	    fish.swim()
	
	in_the_pacific(sammy)
	in_the_pacific(casey)
	
	dan outputnya adalah:
	the shark's skeleton is made or cartilage
	the clownfish skeleton is made of bone
	the sharknis swimming
	the clown fish can swim backward
	
	2. polymorphisme with method.
	
	class document:
	    def __init__(self,name):
	        self.name = name
	    def show(self):
	        raise notimplementederror("subclass must implement abstract method")
	class pdf(document):
	    def show(self):
	        return 'show pdf contents!'
	    
	class word(document):
	    def show(self):
	        return 'show word contents'
	
	document = [pdf('document1'),
	           pdf('document2'),
	           word('document3')]
	
	for document in document:
	    print(document.name + ':' + document.show())
	    
	JIKA DIRUN:
	document1:show pdf contents!
	document2:show pdf contents!
	document3:show word contents
	
	
	3. polymorphisme abstarct class
	
	class car:
	    def __init__(self,name):
	        self.name = name
	    def drive(self):
	        raise notimplementederror("subclass must implement abstract method")
	    def stop(self):
	        raise not implementederror("subclass must implement abstract method")
	
	class sportscar(car):
	    def drive(self):
	        return 'sportscar driving'
	    def stop(self):
	        return 'sportscar braking'
	class truck(car):
	    def drive(self):
	        return 'truck driving slowly because heaavily loaded'
	    def stop(self):
	        return 'truck braking'
	    
	cars = [truck('bananatruck'),
	       truck('orangetruck'),
	       sportscar('23')]
	    
	for car in cars:
	    print(car.name + ':' + car.drive())
	    
	Outputnya adalah
	bananatruck:truck driving slowly because heaavily loaded
	orangetruck:truck driving slowly because heaavily loaded
	23:sportscar driving
	
  class shark():
    def swim(self):
        print("the shark is swim")
    def swim_backwards():
        print("the shark cannot swim backwars,but can sink backward")
    def skalaton(self):
        print("the shark skelaton is mode of cartilago")

class clamfish():
    def swim(self):
        print("the clam fish is swim")
    def swim_backwards():
        print("the clamfish can swim backwars,but can sink backward")
    def skalaton(self):
        print("the clamfish skelaton is mode of bone")
abc=shark()
abc.skalaton()

easy=clamfish()
easy.skalaton()

def in_the_pacific(fish):
    fish.swim()

in_the_pacific(abc)
in_the_pacific(easy)

	
	
	
	        
	    

